/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExchangeStats,
  OrderBookDetails,
  OrderBookOrders,
  OrderBooks,
  Orders,
  ResultCode,
  Trades,
} from '../models/index';
import {
    ExchangeStatsFromJSON,
    ExchangeStatsToJSON,
    OrderBookDetailsFromJSON,
    OrderBookDetailsToJSON,
    OrderBookOrdersFromJSON,
    OrderBookOrdersToJSON,
    OrderBooksFromJSON,
    OrderBooksToJSON,
    OrdersFromJSON,
    OrdersToJSON,
    ResultCodeFromJSON,
    ResultCodeToJSON,
    TradesFromJSON,
    TradesToJSON,
} from '../models/index';

export interface AccountActiveOrdersRequest {
    accountIndex: number;
    marketId: number;
    auth: string;
}

export interface AccountInactiveOrdersRequest {
    accountIndex: number;
    limit: number;
    marketId?: number;
    askFilter?: number;
    betweenTimestamps?: string;
    cursor?: string;
}

export interface AccountOrdersRequest {
    accountIndex: number;
    marketId: number;
    limit: number;
    cursor?: string;
}

export interface OrderBookDetailsRequest {
    marketId?: number;
}

export interface OrderBookOrdersRequest {
    marketId: number;
    limit: number;
}

export interface OrderBooksRequest {
    marketId?: number;
}

export interface RecentTradesRequest {
    marketId: number;
    limit: number;
}

export interface TradesRequest {
    sortBy: TradesSortByEnum;
    limit: number;
    marketId?: number;
    accountIndex?: number;
    orderIndex?: number;
    sortDir?: TradesSortDirEnum;
    cursor?: string;
    from?: number;
    askFilter?: number;
}

/**
 * OrderApi - interface
 * 
 * @export
 * @interface OrderApiInterface
 */
export interface OrderApiInterface {
    /**
     * Get account active orders
     * @summary accountActiveOrders
     * @param {number} accountIndex 
     * @param {number} marketId 
     * @param {string} auth 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    accountActiveOrdersRaw(requestParameters: AccountActiveOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Orders>>;

    /**
     * Get account active orders
     * accountActiveOrders
     */
    accountActiveOrders(requestParameters: AccountActiveOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Orders>;

    /**
     * Get account active orders
     * @summary accountInactiveOrders
     * @param {number} accountIndex 
     * @param {number} limit 
     * @param {number} [marketId] 
     * @param {number} [askFilter] 
     * @param {string} [betweenTimestamps] 
     * @param {string} [cursor] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    accountInactiveOrdersRaw(requestParameters: AccountInactiveOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Orders>>;

    /**
     * Get account active orders
     * accountInactiveOrders
     */
    accountInactiveOrders(requestParameters: AccountInactiveOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Orders>;

    /**
     * Get account orders
     * @summary accountOrders
     * @param {number} accountIndex 
     * @param {number} marketId 
     * @param {number} limit 
     * @param {string} [cursor] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    accountOrdersRaw(requestParameters: AccountOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Orders>>;

    /**
     * Get account orders
     * accountOrders
     */
    accountOrders(requestParameters: AccountOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Orders>;

    /**
     * Get exchange stats
     * @summary exchangeStats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    exchangeStatsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExchangeStats>>;

    /**
     * Get exchange stats
     * exchangeStats
     */
    exchangeStats(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExchangeStats>;

    /**
     * Get order books metadata
     * @summary orderBookDetails
     * @param {number} [marketId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    orderBookDetailsRaw(requestParameters: OrderBookDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderBookDetails>>;

    /**
     * Get order books metadata
     * orderBookDetails
     */
    orderBookDetails(requestParameters: OrderBookDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderBookDetails>;

    /**
     * Get order book orders
     * @summary orderBookOrders
     * @param {number} marketId 
     * @param {number} limit 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    orderBookOrdersRaw(requestParameters: OrderBookOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderBookOrders>>;

    /**
     * Get order book orders
     * orderBookOrders
     */
    orderBookOrders(requestParameters: OrderBookOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderBookOrders>;

    /**
     * Get order books metadata.<hr>**Response Description:**<br><br>1) **Taker and maker fees** are in percentage.<br>2) **Min base amount:** The amount of base token that can be traded in a single order.<br>3) **Min quote amount:** The amount of quote token that can be traded in a single order.<br>4) **Supported size decimals:** The number of decimal places that can be used for the size of the order.<br>5) **Supported price decimals:** The number of decimal places that can be used for the price of the order.<br>6) **Supported quote decimals:** Size Decimals + Quote Decimals.
     * @summary orderBooks
     * @param {number} [marketId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    orderBooksRaw(requestParameters: OrderBooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderBooks>>;

    /**
     * Get order books metadata.<hr>**Response Description:**<br><br>1) **Taker and maker fees** are in percentage.<br>2) **Min base amount:** The amount of base token that can be traded in a single order.<br>3) **Min quote amount:** The amount of quote token that can be traded in a single order.<br>4) **Supported size decimals:** The number of decimal places that can be used for the size of the order.<br>5) **Supported price decimals:** The number of decimal places that can be used for the price of the order.<br>6) **Supported quote decimals:** Size Decimals + Quote Decimals.
     * orderBooks
     */
    orderBooks(requestParameters: OrderBooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderBooks>;

    /**
     * Get recent trades
     * @summary recentTrades
     * @param {number} marketId 
     * @param {number} limit 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    recentTradesRaw(requestParameters: RecentTradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Trades>>;

    /**
     * Get recent trades
     * recentTrades
     */
    recentTrades(requestParameters: RecentTradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Trades>;

    /**
     * Get trades
     * @summary trades
     * @param {'block_height' | 'timestamp' | 'trade_id'} sortBy 
     * @param {number} limit 
     * @param {number} [marketId] 
     * @param {number} [accountIndex] 
     * @param {number} [orderIndex] 
     * @param {'asc' | 'desc'} [sortDir] 
     * @param {string} [cursor] 
     * @param {number} [from] 
     * @param {number} [askFilter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    tradesRaw(requestParameters: TradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Trades>>;

    /**
     * Get trades
     * trades
     */
    trades(requestParameters: TradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Trades>;

}

/**
 * 
 */
export class OrderApi extends runtime.BaseAPI implements OrderApiInterface {

    /**
     * Get account active orders
     * accountActiveOrders
     */
    async accountActiveOrdersRaw(requestParameters: AccountActiveOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Orders>> {
        if (requestParameters['accountIndex'] == null) {
            throw new runtime.RequiredError(
                'accountIndex',
                'Required parameter "accountIndex" was null or undefined when calling accountActiveOrders().'
            );
        }

        if (requestParameters['marketId'] == null) {
            throw new runtime.RequiredError(
                'marketId',
                'Required parameter "marketId" was null or undefined when calling accountActiveOrders().'
            );
        }

        if (requestParameters['auth'] == null) {
            throw new runtime.RequiredError(
                'auth',
                'Required parameter "auth" was null or undefined when calling accountActiveOrders().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['accountIndex'] != null) {
            queryParameters['account_index'] = requestParameters['accountIndex'];
        }

        if (requestParameters['marketId'] != null) {
            queryParameters['market_id'] = requestParameters['marketId'];
        }

        if (requestParameters['auth'] != null) {
            queryParameters['auth'] = requestParameters['auth'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/accountActiveOrders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrdersFromJSON(jsonValue));
    }

    /**
     * Get account active orders
     * accountActiveOrders
     */
    async accountActiveOrders(requestParameters: AccountActiveOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Orders> {
        const response = await this.accountActiveOrdersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get account active orders
     * accountInactiveOrders
     */
    async accountInactiveOrdersRaw(requestParameters: AccountInactiveOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Orders>> {
        if (requestParameters['accountIndex'] == null) {
            throw new runtime.RequiredError(
                'accountIndex',
                'Required parameter "accountIndex" was null or undefined when calling accountInactiveOrders().'
            );
        }

        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling accountInactiveOrders().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['accountIndex'] != null) {
            queryParameters['account_index'] = requestParameters['accountIndex'];
        }

        if (requestParameters['marketId'] != null) {
            queryParameters['market_id'] = requestParameters['marketId'];
        }

        if (requestParameters['askFilter'] != null) {
            queryParameters['ask_filter'] = requestParameters['askFilter'];
        }

        if (requestParameters['betweenTimestamps'] != null) {
            queryParameters['between_timestamps'] = requestParameters['betweenTimestamps'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/accountInactiveOrders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrdersFromJSON(jsonValue));
    }

    /**
     * Get account active orders
     * accountInactiveOrders
     */
    async accountInactiveOrders(requestParameters: AccountInactiveOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Orders> {
        const response = await this.accountInactiveOrdersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get account orders
     * accountOrders
     */
    async accountOrdersRaw(requestParameters: AccountOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Orders>> {
        if (requestParameters['accountIndex'] == null) {
            throw new runtime.RequiredError(
                'accountIndex',
                'Required parameter "accountIndex" was null or undefined when calling accountOrders().'
            );
        }

        if (requestParameters['marketId'] == null) {
            throw new runtime.RequiredError(
                'marketId',
                'Required parameter "marketId" was null or undefined when calling accountOrders().'
            );
        }

        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling accountOrders().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['accountIndex'] != null) {
            queryParameters['account_index'] = requestParameters['accountIndex'];
        }

        if (requestParameters['marketId'] != null) {
            queryParameters['market_id'] = requestParameters['marketId'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/accountOrders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrdersFromJSON(jsonValue));
    }

    /**
     * Get account orders
     * accountOrders
     */
    async accountOrders(requestParameters: AccountOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Orders> {
        const response = await this.accountOrdersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get exchange stats
     * exchangeStats
     */
    async exchangeStatsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExchangeStats>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/exchangeStats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExchangeStatsFromJSON(jsonValue));
    }

    /**
     * Get exchange stats
     * exchangeStats
     */
    async exchangeStats(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExchangeStats> {
        const response = await this.exchangeStatsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get order books metadata
     * orderBookDetails
     */
    async orderBookDetailsRaw(requestParameters: OrderBookDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderBookDetails>> {
        const queryParameters: any = {};

        if (requestParameters['marketId'] != null) {
            queryParameters['market_id'] = requestParameters['marketId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/orderBookDetails`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderBookDetailsFromJSON(jsonValue));
    }

    /**
     * Get order books metadata
     * orderBookDetails
     */
    async orderBookDetails(requestParameters: OrderBookDetailsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderBookDetails> {
        const response = await this.orderBookDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get order book orders
     * orderBookOrders
     */
    async orderBookOrdersRaw(requestParameters: OrderBookOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderBookOrders>> {
        if (requestParameters['marketId'] == null) {
            throw new runtime.RequiredError(
                'marketId',
                'Required parameter "marketId" was null or undefined when calling orderBookOrders().'
            );
        }

        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling orderBookOrders().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['marketId'] != null) {
            queryParameters['market_id'] = requestParameters['marketId'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/orderBookOrders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderBookOrdersFromJSON(jsonValue));
    }

    /**
     * Get order book orders
     * orderBookOrders
     */
    async orderBookOrders(requestParameters: OrderBookOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderBookOrders> {
        const response = await this.orderBookOrdersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get order books metadata.<hr>**Response Description:**<br><br>1) **Taker and maker fees** are in percentage.<br>2) **Min base amount:** The amount of base token that can be traded in a single order.<br>3) **Min quote amount:** The amount of quote token that can be traded in a single order.<br>4) **Supported size decimals:** The number of decimal places that can be used for the size of the order.<br>5) **Supported price decimals:** The number of decimal places that can be used for the price of the order.<br>6) **Supported quote decimals:** Size Decimals + Quote Decimals.
     * orderBooks
     */
    async orderBooksRaw(requestParameters: OrderBooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderBooks>> {
        const queryParameters: any = {};

        if (requestParameters['marketId'] != null) {
            queryParameters['market_id'] = requestParameters['marketId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/orderBooks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderBooksFromJSON(jsonValue));
    }

    /**
     * Get order books metadata.<hr>**Response Description:**<br><br>1) **Taker and maker fees** are in percentage.<br>2) **Min base amount:** The amount of base token that can be traded in a single order.<br>3) **Min quote amount:** The amount of quote token that can be traded in a single order.<br>4) **Supported size decimals:** The number of decimal places that can be used for the size of the order.<br>5) **Supported price decimals:** The number of decimal places that can be used for the price of the order.<br>6) **Supported quote decimals:** Size Decimals + Quote Decimals.
     * orderBooks
     */
    async orderBooks(requestParameters: OrderBooksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderBooks> {
        const response = await this.orderBooksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get recent trades
     * recentTrades
     */
    async recentTradesRaw(requestParameters: RecentTradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Trades>> {
        if (requestParameters['marketId'] == null) {
            throw new runtime.RequiredError(
                'marketId',
                'Required parameter "marketId" was null or undefined when calling recentTrades().'
            );
        }

        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling recentTrades().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['marketId'] != null) {
            queryParameters['market_id'] = requestParameters['marketId'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/recentTrades`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TradesFromJSON(jsonValue));
    }

    /**
     * Get recent trades
     * recentTrades
     */
    async recentTrades(requestParameters: RecentTradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Trades> {
        const response = await this.recentTradesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get trades
     * trades
     */
    async tradesRaw(requestParameters: TradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Trades>> {
        if (requestParameters['sortBy'] == null) {
            throw new runtime.RequiredError(
                'sortBy',
                'Required parameter "sortBy" was null or undefined when calling trades().'
            );
        }

        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling trades().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['marketId'] != null) {
            queryParameters['market_id'] = requestParameters['marketId'];
        }

        if (requestParameters['accountIndex'] != null) {
            queryParameters['account_index'] = requestParameters['accountIndex'];
        }

        if (requestParameters['orderIndex'] != null) {
            queryParameters['order_index'] = requestParameters['orderIndex'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sort_by'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortDir'] != null) {
            queryParameters['sort_dir'] = requestParameters['sortDir'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['from'] != null) {
            queryParameters['from'] = requestParameters['from'];
        }

        if (requestParameters['askFilter'] != null) {
            queryParameters['ask_filter'] = requestParameters['askFilter'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/trades`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TradesFromJSON(jsonValue));
    }

    /**
     * Get trades
     * trades
     */
    async trades(requestParameters: TradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Trades> {
        const response = await this.tradesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const TradesSortByEnum = {
    blockHeight: 'block_height',
    timestamp: 'timestamp',
    tradeId: 'trade_id'
} as const;
export type TradesSortByEnum = typeof TradesSortByEnum[keyof typeof TradesSortByEnum];
/**
 * @export
 */
export const TradesSortDirEnum = {
    asc: 'asc',
    desc: 'desc'
} as const;
export type TradesSortDirEnum = typeof TradesSortDirEnum[keyof typeof TradesSortDirEnum];
