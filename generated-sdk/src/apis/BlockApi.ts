/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Blocks,
  CurrentHeight,
  ResultCode,
} from '../models/index';
import {
    BlocksFromJSON,
    BlocksToJSON,
    CurrentHeightFromJSON,
    CurrentHeightToJSON,
    ResultCodeFromJSON,
    ResultCodeToJSON,
} from '../models/index';

export interface BlockRequest {
    by: BlockByEnum;
    value: string;
}

export interface BlocksRequest {
    limit: number;
    index?: number;
    sort?: BlocksSortEnum;
}

/**
 * BlockApi - interface
 * 
 * @export
 * @interface BlockApiInterface
 */
export interface BlockApiInterface {
    /**
     * Get block by its height or commitment
     * @summary block
     * @param {'commitment' | 'height'} by 
     * @param {string} value 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockApiInterface
     */
    blockRaw(requestParameters: BlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blocks>>;

    /**
     * Get block by its height or commitment
     * block
     */
    block(requestParameters: BlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blocks>;

    /**
     * Get blocks
     * @summary blocks
     * @param {number} limit 
     * @param {number} [index] 
     * @param {'asc' | 'desc'} [sort] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockApiInterface
     */
    blocksRaw(requestParameters: BlocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blocks>>;

    /**
     * Get blocks
     * blocks
     */
    blocks(requestParameters: BlocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blocks>;

    /**
     * Get current height
     * @summary currentHeight
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockApiInterface
     */
    currentHeightRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrentHeight>>;

    /**
     * Get current height
     * currentHeight
     */
    currentHeight(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrentHeight>;

}

/**
 * 
 */
export class BlockApi extends runtime.BaseAPI implements BlockApiInterface {

    /**
     * Get block by its height or commitment
     * block
     */
    async blockRaw(requestParameters: BlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blocks>> {
        if (requestParameters['by'] == null) {
            throw new runtime.RequiredError(
                'by',
                'Required parameter "by" was null or undefined when calling block().'
            );
        }

        if (requestParameters['value'] == null) {
            throw new runtime.RequiredError(
                'value',
                'Required parameter "value" was null or undefined when calling block().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['by'] != null) {
            queryParameters['by'] = requestParameters['by'];
        }

        if (requestParameters['value'] != null) {
            queryParameters['value'] = requestParameters['value'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/block`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlocksFromJSON(jsonValue));
    }

    /**
     * Get block by its height or commitment
     * block
     */
    async block(requestParameters: BlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blocks> {
        const response = await this.blockRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get blocks
     * blocks
     */
    async blocksRaw(requestParameters: BlocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blocks>> {
        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling blocks().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['index'] != null) {
            queryParameters['index'] = requestParameters['index'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/blocks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlocksFromJSON(jsonValue));
    }

    /**
     * Get blocks
     * blocks
     */
    async blocks(requestParameters: BlocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blocks> {
        const response = await this.blocksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get current height
     * currentHeight
     */
    async currentHeightRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrentHeight>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/currentHeight`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrentHeightFromJSON(jsonValue));
    }

    /**
     * Get current height
     * currentHeight
     */
    async currentHeight(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrentHeight> {
        const response = await this.currentHeightRaw(initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const BlockByEnum = {
    commitment: 'commitment',
    height: 'height'
} as const;
export type BlockByEnum = typeof BlockByEnum[keyof typeof BlockByEnum];
/**
 * @export
 */
export const BlocksSortEnum = {
    asc: 'asc',
    desc: 'desc'
} as const;
export type BlocksSortEnum = typeof BlocksSortEnum[keyof typeof BlocksSortEnum];
