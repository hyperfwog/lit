/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    orderIndex: number;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    clientOrderIndex: number;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    marketIndex: number;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    ownerAccountIndex: number;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    initialBaseAmount: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    price: string;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    nonce: number;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    remainingBaseAmount: string;
    /**
     * 
     * @type {boolean}
     * @memberof Order
     */
    isAsk: boolean;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    baseSize: number;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    basePrice: number;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    filledBaseAmount: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    filledQuoteAmount: string;
    /**
     *  TODO: remove this
     * @type {string}
     * @memberof Order
     */
    side: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    type: OrderTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    timeInForce: OrderTimeInForceEnum;
    /**
     * 
     * @type {boolean}
     * @memberof Order
     */
    reduceOnly: boolean;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    triggerPrice: string;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    orderExpiry: number;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    status: OrderStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    triggerTime: number;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    parentOrderIndex: number;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    blockHeight: number;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    timestamp: number;
}


/**
 * @export
 */
export const OrderTypeEnum = {
    limit: 'limit',
    market: 'market',
    stopLoss: 'stop-loss',
    stopLossLimit: 'stop-loss-limit',
    takeProfit: 'take-profit',
    takeProfitLimit: 'take-profit-limit',
    twap: 'twap',
    twapSub: 'twap-sub',
    liquidation: 'liquidation'
} as const;
export type OrderTypeEnum = typeof OrderTypeEnum[keyof typeof OrderTypeEnum];

/**
 * @export
 */
export const OrderTimeInForceEnum = {
    goodTillTime: 'good-till-time',
    immediateOrCancel: 'immediate-or-cancel',
    postOnly: 'post-only',
    unknown: 'Unknown'
} as const;
export type OrderTimeInForceEnum = typeof OrderTimeInForceEnum[keyof typeof OrderTimeInForceEnum];

/**
 * @export
 */
export const OrderStatusEnum = {
    inProgress: 'in-progress',
    pending: 'pending',
    open: 'open',
    filled: 'filled',
    canceled: 'canceled',
    canceledPostOnly: 'canceled-post-only',
    canceledReduceOnly: 'canceled-reduce-only',
    canceledPositionNotAllowed: 'canceled-position-not-allowed',
    canceledMarginNotAllowed: 'canceled-margin-not-allowed',
    canceledTooMuchSlippage: 'canceled-too-much-slippage',
    canceledNotEnoughLiquidity: 'canceled-not-enough-liquidity',
    canceledSelfTrade: 'canceled-self-trade',
    canceledExpired: 'canceled-expired'
} as const;
export type OrderStatusEnum = typeof OrderStatusEnum[keyof typeof OrderStatusEnum];


/**
 * Check if a given object implements the Order interface.
 */
export function instanceOfOrder(value: object): value is Order {
    if (!('orderIndex' in value) || value['orderIndex'] === undefined) return false;
    if (!('clientOrderIndex' in value) || value['clientOrderIndex'] === undefined) return false;
    if (!('marketIndex' in value) || value['marketIndex'] === undefined) return false;
    if (!('ownerAccountIndex' in value) || value['ownerAccountIndex'] === undefined) return false;
    if (!('initialBaseAmount' in value) || value['initialBaseAmount'] === undefined) return false;
    if (!('price' in value) || value['price'] === undefined) return false;
    if (!('nonce' in value) || value['nonce'] === undefined) return false;
    if (!('remainingBaseAmount' in value) || value['remainingBaseAmount'] === undefined) return false;
    if (!('isAsk' in value) || value['isAsk'] === undefined) return false;
    if (!('baseSize' in value) || value['baseSize'] === undefined) return false;
    if (!('basePrice' in value) || value['basePrice'] === undefined) return false;
    if (!('filledBaseAmount' in value) || value['filledBaseAmount'] === undefined) return false;
    if (!('filledQuoteAmount' in value) || value['filledQuoteAmount'] === undefined) return false;
    if (!('side' in value) || value['side'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('timeInForce' in value) || value['timeInForce'] === undefined) return false;
    if (!('reduceOnly' in value) || value['reduceOnly'] === undefined) return false;
    if (!('triggerPrice' in value) || value['triggerPrice'] === undefined) return false;
    if (!('orderExpiry' in value) || value['orderExpiry'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('triggerTime' in value) || value['triggerTime'] === undefined) return false;
    if (!('parentOrderIndex' in value) || value['parentOrderIndex'] === undefined) return false;
    if (!('blockHeight' in value) || value['blockHeight'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    return true;
}

export function OrderFromJSON(json: any): Order {
    return OrderFromJSONTyped(json, false);
}

export function OrderFromJSONTyped(json: any, ignoreDiscriminator: boolean): Order {
    if (json == null) {
        return json;
    }
    return {
        
        'orderIndex': json['order_index'],
        'clientOrderIndex': json['client_order_index'],
        'marketIndex': json['market_index'],
        'ownerAccountIndex': json['owner_account_index'],
        'initialBaseAmount': json['initial_base_amount'],
        'price': json['price'],
        'nonce': json['nonce'],
        'remainingBaseAmount': json['remaining_base_amount'],
        'isAsk': json['is_ask'],
        'baseSize': json['base_size'],
        'basePrice': json['base_price'],
        'filledBaseAmount': json['filled_base_amount'],
        'filledQuoteAmount': json['filled_quote_amount'],
        'side': json['side'],
        'type': json['type'],
        'timeInForce': json['time_in_force'],
        'reduceOnly': json['reduce_only'],
        'triggerPrice': json['trigger_price'],
        'orderExpiry': json['order_expiry'],
        'status': json['status'],
        'triggerTime': json['trigger_time'],
        'parentOrderIndex': json['parent_order_index'],
        'blockHeight': json['block_height'],
        'timestamp': json['timestamp'],
    };
}

export function OrderToJSON(json: any): Order {
    return OrderToJSONTyped(json, false);
}

export function OrderToJSONTyped(value?: Order | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'order_index': value['orderIndex'],
        'client_order_index': value['clientOrderIndex'],
        'market_index': value['marketIndex'],
        'owner_account_index': value['ownerAccountIndex'],
        'initial_base_amount': value['initialBaseAmount'],
        'price': value['price'],
        'nonce': value['nonce'],
        'remaining_base_amount': value['remainingBaseAmount'],
        'is_ask': value['isAsk'],
        'base_size': value['baseSize'],
        'base_price': value['basePrice'],
        'filled_base_amount': value['filledBaseAmount'],
        'filled_quote_amount': value['filledQuoteAmount'],
        'side': value['side'],
        'type': value['type'],
        'time_in_force': value['timeInForce'],
        'reduce_only': value['reduceOnly'],
        'trigger_price': value['triggerPrice'],
        'order_expiry': value['orderExpiry'],
        'status': value['status'],
        'trigger_time': value['triggerTime'],
        'parent_order_index': value['parentOrderIndex'],
        'block_height': value['blockHeight'],
        'timestamp': value['timestamp'],
    };
}

