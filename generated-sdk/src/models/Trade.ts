/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Trade
 */
export interface Trade {
    /**
     * 
     * @type {number}
     * @memberof Trade
     */
    tradeId: number;
    /**
     * 
     * @type {string}
     * @memberof Trade
     */
    txHash: string;
    /**
     * 
     * @type {string}
     * @memberof Trade
     */
    type: TradeTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof Trade
     */
    marketId: number;
    /**
     * 
     * @type {string}
     * @memberof Trade
     */
    size: string;
    /**
     * 
     * @type {string}
     * @memberof Trade
     */
    price: string;
    /**
     * 
     * @type {string}
     * @memberof Trade
     */
    usdAmount: string;
    /**
     * 
     * @type {number}
     * @memberof Trade
     */
    askId: number;
    /**
     * 
     * @type {number}
     * @memberof Trade
     */
    bidId: number;
    /**
     * 
     * @type {number}
     * @memberof Trade
     */
    askAccountId: number;
    /**
     * 
     * @type {number}
     * @memberof Trade
     */
    bidAccountId: number;
    /**
     * 
     * @type {boolean}
     * @memberof Trade
     */
    isMakerAsk: boolean;
    /**
     * 
     * @type {number}
     * @memberof Trade
     */
    blockHeight: number;
    /**
     * 
     * @type {number}
     * @memberof Trade
     */
    timestamp: number;
}


/**
 * @export
 */
export const TradeTypeEnum = {
    trade: 'trade',
    liquidation: 'liquidation',
    deleverage: 'deleverage'
} as const;
export type TradeTypeEnum = typeof TradeTypeEnum[keyof typeof TradeTypeEnum];


/**
 * Check if a given object implements the Trade interface.
 */
export function instanceOfTrade(value: object): value is Trade {
    if (!('tradeId' in value) || value['tradeId'] === undefined) return false;
    if (!('txHash' in value) || value['txHash'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('marketId' in value) || value['marketId'] === undefined) return false;
    if (!('size' in value) || value['size'] === undefined) return false;
    if (!('price' in value) || value['price'] === undefined) return false;
    if (!('usdAmount' in value) || value['usdAmount'] === undefined) return false;
    if (!('askId' in value) || value['askId'] === undefined) return false;
    if (!('bidId' in value) || value['bidId'] === undefined) return false;
    if (!('askAccountId' in value) || value['askAccountId'] === undefined) return false;
    if (!('bidAccountId' in value) || value['bidAccountId'] === undefined) return false;
    if (!('isMakerAsk' in value) || value['isMakerAsk'] === undefined) return false;
    if (!('blockHeight' in value) || value['blockHeight'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    return true;
}

export function TradeFromJSON(json: any): Trade {
    return TradeFromJSONTyped(json, false);
}

export function TradeFromJSONTyped(json: any, ignoreDiscriminator: boolean): Trade {
    if (json == null) {
        return json;
    }
    return {
        
        'tradeId': json['trade_id'],
        'txHash': json['tx_hash'],
        'type': json['type'],
        'marketId': json['market_id'],
        'size': json['size'],
        'price': json['price'],
        'usdAmount': json['usd_amount'],
        'askId': json['ask_id'],
        'bidId': json['bid_id'],
        'askAccountId': json['ask_account_id'],
        'bidAccountId': json['bid_account_id'],
        'isMakerAsk': json['is_maker_ask'],
        'blockHeight': json['block_height'],
        'timestamp': json['timestamp'],
    };
}

export function TradeToJSON(json: any): Trade {
    return TradeToJSONTyped(json, false);
}

export function TradeToJSONTyped(value?: Trade | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'trade_id': value['tradeId'],
        'tx_hash': value['txHash'],
        'type': value['type'],
        'market_id': value['marketId'],
        'size': value['size'],
        'price': value['price'],
        'usd_amount': value['usdAmount'],
        'ask_id': value['askId'],
        'bid_id': value['bidId'],
        'ask_account_id': value['askAccountId'],
        'bid_account_id': value['bidAccountId'],
        'is_maker_ask': value['isMakerAsk'],
        'block_height': value['blockHeight'],
        'timestamp': value['timestamp'],
    };
}

