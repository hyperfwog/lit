/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface OrderBook
 */
export interface OrderBook {
    /**
     * 
     * @type {string}
     * @memberof OrderBook
     */
    symbol: string;
    /**
     * 
     * @type {number}
     * @memberof OrderBook
     */
    marketId: number;
    /**
     * 
     * @type {string}
     * @memberof OrderBook
     */
    status: OrderBookStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof OrderBook
     */
    takerFee: string;
    /**
     * 
     * @type {string}
     * @memberof OrderBook
     */
    makerFee: string;
    /**
     * 
     * @type {string}
     * @memberof OrderBook
     */
    liquidationFee: string;
    /**
     * 
     * @type {string}
     * @memberof OrderBook
     */
    minBaseAmount: string;
    /**
     * 
     * @type {string}
     * @memberof OrderBook
     */
    minQuoteAmount: string;
    /**
     * 
     * @type {number}
     * @memberof OrderBook
     */
    supportedSizeDecimals: number;
    /**
     * 
     * @type {number}
     * @memberof OrderBook
     */
    supportedPriceDecimals: number;
    /**
     * 
     * @type {number}
     * @memberof OrderBook
     */
    supportedQuoteDecimals: number;
}


/**
 * @export
 */
export const OrderBookStatusEnum = {
    frozen: 'frozen',
    active: 'active'
} as const;
export type OrderBookStatusEnum = typeof OrderBookStatusEnum[keyof typeof OrderBookStatusEnum];


/**
 * Check if a given object implements the OrderBook interface.
 */
export function instanceOfOrderBook(value: object): value is OrderBook {
    if (!('symbol' in value) || value['symbol'] === undefined) return false;
    if (!('marketId' in value) || value['marketId'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('takerFee' in value) || value['takerFee'] === undefined) return false;
    if (!('makerFee' in value) || value['makerFee'] === undefined) return false;
    if (!('liquidationFee' in value) || value['liquidationFee'] === undefined) return false;
    if (!('minBaseAmount' in value) || value['minBaseAmount'] === undefined) return false;
    if (!('minQuoteAmount' in value) || value['minQuoteAmount'] === undefined) return false;
    if (!('supportedSizeDecimals' in value) || value['supportedSizeDecimals'] === undefined) return false;
    if (!('supportedPriceDecimals' in value) || value['supportedPriceDecimals'] === undefined) return false;
    if (!('supportedQuoteDecimals' in value) || value['supportedQuoteDecimals'] === undefined) return false;
    return true;
}

export function OrderBookFromJSON(json: any): OrderBook {
    return OrderBookFromJSONTyped(json, false);
}

export function OrderBookFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderBook {
    if (json == null) {
        return json;
    }
    return {
        
        'symbol': json['symbol'],
        'marketId': json['market_id'],
        'status': json['status'],
        'takerFee': json['taker_fee'],
        'makerFee': json['maker_fee'],
        'liquidationFee': json['liquidation_fee'],
        'minBaseAmount': json['min_base_amount'],
        'minQuoteAmount': json['min_quote_amount'],
        'supportedSizeDecimals': json['supported_size_decimals'],
        'supportedPriceDecimals': json['supported_price_decimals'],
        'supportedQuoteDecimals': json['supported_quote_decimals'],
    };
}

export function OrderBookToJSON(json: any): OrderBook {
    return OrderBookToJSONTyped(json, false);
}

export function OrderBookToJSONTyped(value?: OrderBook | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'symbol': value['symbol'],
        'market_id': value['marketId'],
        'status': value['status'],
        'taker_fee': value['takerFee'],
        'maker_fee': value['makerFee'],
        'liquidation_fee': value['liquidationFee'],
        'min_base_amount': value['minBaseAmount'],
        'min_quote_amount': value['minQuoteAmount'],
        'supported_size_decimals': value['supportedSizeDecimals'],
        'supported_price_decimals': value['supportedPriceDecimals'],
        'supported_quote_decimals': value['supportedQuoteDecimals'],
    };
}

