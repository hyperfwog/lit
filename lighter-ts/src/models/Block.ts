/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Tx } from './Tx';
import {
    TxFromJSON,
    TxFromJSONTyped,
    TxToJSON,
    TxToJSONTyped,
} from './Tx';

/**
 * 
 * @export
 * @interface Block
 */
export interface Block {
    /**
     * 
     * @type {string}
     * @memberof Block
     */
    commitment: string;
    /**
     * 
     * @type {number}
     * @memberof Block
     */
    height: number;
    /**
     * 
     * @type {string}
     * @memberof Block
     */
    stateRoot: string;
    /**
     * 
     * @type {number}
     * @memberof Block
     */
    priorityOperations: number;
    /**
     * 
     * @type {number}
     * @memberof Block
     */
    onChainL2Operations: number;
    /**
     * 
     * @type {string}
     * @memberof Block
     */
    pendingOnChainOperationsPubData: string;
    /**
     * 
     * @type {string}
     * @memberof Block
     */
    committedTxHash: string;
    /**
     * 
     * @type {number}
     * @memberof Block
     */
    committedAt: number;
    /**
     * 
     * @type {string}
     * @memberof Block
     */
    verifiedTxHash: string;
    /**
     * 
     * @type {number}
     * @memberof Block
     */
    verifiedAt: number;
    /**
     * 
     * @type {Array<Tx>}
     * @memberof Block
     */
    txs: Array<Tx>;
    /**
     * 
     * @type {number}
     * @memberof Block
     */
    status: number;
    /**
     * 
     * @type {number}
     * @memberof Block
     */
    size: number;
}

/**
 * Check if a given object implements the Block interface.
 */
export function instanceOfBlock(value: object): value is Block {
    if (!('commitment' in value) || value['commitment'] === undefined) return false;
    if (!('height' in value) || value['height'] === undefined) return false;
    if (!('stateRoot' in value) || value['stateRoot'] === undefined) return false;
    if (!('priorityOperations' in value) || value['priorityOperations'] === undefined) return false;
    if (!('onChainL2Operations' in value) || value['onChainL2Operations'] === undefined) return false;
    if (!('pendingOnChainOperationsPubData' in value) || value['pendingOnChainOperationsPubData'] === undefined) return false;
    if (!('committedTxHash' in value) || value['committedTxHash'] === undefined) return false;
    if (!('committedAt' in value) || value['committedAt'] === undefined) return false;
    if (!('verifiedTxHash' in value) || value['verifiedTxHash'] === undefined) return false;
    if (!('verifiedAt' in value) || value['verifiedAt'] === undefined) return false;
    if (!('txs' in value) || value['txs'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('size' in value) || value['size'] === undefined) return false;
    return true;
}

export function BlockFromJSON(json: any): Block {
    return BlockFromJSONTyped(json, false);
}

export function BlockFromJSONTyped(json: any, ignoreDiscriminator: boolean): Block {
    if (json == null) {
        return json;
    }
    return {
        
        'commitment': json['commitment'],
        'height': json['height'],
        'stateRoot': json['state_root'],
        'priorityOperations': json['priority_operations'],
        'onChainL2Operations': json['on_chain_l2_operations'],
        'pendingOnChainOperationsPubData': json['pending_on_chain_operations_pub_data'],
        'committedTxHash': json['committed_tx_hash'],
        'committedAt': json['committed_at'],
        'verifiedTxHash': json['verified_tx_hash'],
        'verifiedAt': json['verified_at'],
        'txs': ((json['txs'] as Array<any>).map(TxFromJSON)),
        'status': json['status'],
        'size': json['size'],
    };
}

export function BlockToJSON(json: any): Block {
    return BlockToJSONTyped(json, false);
}

export function BlockToJSONTyped(value?: Block | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'commitment': value['commitment'],
        'height': value['height'],
        'state_root': value['stateRoot'],
        'priority_operations': value['priorityOperations'],
        'on_chain_l2_operations': value['onChainL2Operations'],
        'pending_on_chain_operations_pub_data': value['pendingOnChainOperationsPubData'],
        'committed_tx_hash': value['committedTxHash'],
        'committed_at': value['committedAt'],
        'verified_tx_hash': value['verifiedTxHash'],
        'verified_at': value['verifiedAt'],
        'txs': ((value['txs'] as Array<any>).map(TxToJSON)),
        'status': value['status'],
        'size': value['size'],
    };
}

